#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;

my $help;
my $gc;
my $mink;
my $maxk;


unless (
		GetOptions (
				"help" => \$help,
				"gc=i"   => \$gc,
				"mink=i"  => \$mink,
				"maxk=i" => \$maxk,
		)
		) {die "Failed to parse options\n";}

if ($help) {
		print while (<DATA>);
		exit;
}

my ($file) = @ARGV;

unless ($file) {
		die "Usage is compter [fasta_file_name]\nRun comter --help for more options\n";
}

# Check GC settings
if ($gc) {
		unless ($gc =~ /^\d+$/) {
				die "GC value $gc wasn't an integer";
		}

		if ($gc < 20 or $gc > 80) {
				die "GC must be in the range 20-80%";
		}
}
else {
		$gc = 50;
}

# Check kmer range
if ($mink) {
		unless ($mink =~ /^\d+$/) {
				die "MinK $mink wasn't an integer";
		}
		if ($mink < 1 or $mink > 3) {
				die "MinK must be in the range 1-3%";
		}
}
else {
		$mink = 1;
}

if ($maxk) {
		unless ($maxk =~ /^\d+$/) {
				die "Maxk $maxk wasn't an integer";
		}
		if ($maxk < 1 or $maxk > 3) {
				die "Maxk must be in the range 1-3%";
		}
}
else {
		$maxk = 3
}

if ($maxk < $mink) {
		die "MaxK value ($maxk) was lower than MinK value ($mink)\n";
}

my $background = make_background();




sub make_background {

		my %freqs;

		my @letters = qw(G A T C);

		my @kmers;

		for my $kmer ($mink..$maxk) {
#				warn "Looking at kmer length $kmer\n";
				my @kmers = @letters;
				for (0..($kmer-2)) {
						my @expanded;
						foreach my $existing (@kmers) {
								foreach my $letter (@letters) {
										push @expanded,"$existing$letter";
								}
						}
						@kmers = @expanded;
				}

				foreach my $kmer (@kmers) {
						my $freq = 1;
						my @letters = split(//,$kmer);
						foreach my $letter (@letters) {
								if ($letter eq 'C' or $letter eq 'G') {
										$freq *= ($gc/2/100);
								}
								else {
										$freq *= ((100-$gc)/2/100);
								}
						}

						$freqs{$kmer} = $freq;

#						warn "Frequency of $kmer is $freq\n";
				}

		}

		return \%freqs;

}




__DATA__
