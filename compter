#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
$|++;

my $help;
my $gc;
my $mink;
my $maxk;
my $maxseq;
my $outfile;

unless (
		GetOptions (
				"help" => \$help,
				"gc=i"   => \$gc,
				"mink=i"  => \$mink,
				"maxk=i" => \$maxk,
				"maxseq=i" => \$maxseq,
				"outfile=s" => \$outfile,
		)
		) {die "Failed to parse options\n";}

if ($help) {
		print while (<DATA>);
		exit;
}

my @files = @ARGV;

unless ($outfile and @files) {
		die "Usage is compter --outfile [outfile] [fasta_file1].. [fastq_file_x]\nRun comter --help for more options\n";
}

check_arguments();
my $background = make_background();

open (OUT, '>', $outfile) or die "Failed to write to '$outfile': $!";

# Write the header first...

my @kmer_names = sort keys %$background;

print OUT join("\t",("Sequence","File",@kmer_names)),"\n";


foreach my $file (@files) {
		process_file ($file);
}


close OUT or die "Couldn't write to $outfile: $!";


sub process_file {

		my ($file) = @_;

		warn "Processing $file\n";
		
		my @seqdata;
		my @seqnames;

		my $id;
		my $seq;

		open (IN,$file) or die "Can't read $file: $!";

		my $count = 0;

		while (<IN>) {

				if (/>(\S+)/) {
						my $next_name = $1;
						if ($seq) {
								++$count;

								if ($count % 100 == 0) {
										print ".";
								}

								if ($count == $maxseq) {
										warn "Reached maxseq limit of $maxseq: stopping early\n";
										last;
								}

								if (length($seq) < $maxk) {
										warn "Skipping $id in $file as it's too short (".length($seq).")\n";
								}

								else {
										push @seqdata,calculate_enrichment($seq);
										push @seqnames,$id;
								}
						}
						$seq = "";
						$id = $next_name;
				}
				else {
						s/[\r\n]//g;
						next unless ($_);

						$seq .= uc($_);
				}				
		}

		if ($seq) {
				if (length($seq) < $maxk) {
						warn "Skipping $id in $file as it's too short (".length($seq).")\n";
				}

				else {
						push @seqdata,calculate_enrichment($seq);
						push @seqnames,$id;
				}
		}

		close IN;

		my @kmer_names = sort keys %$background;

		foreach my $sample_index (0..$#seqnames) {
				my @line = ($seqnames[$sample_index],$file);

				my $sample = $seqdata[$sample_index];

				foreach my $index (0..$#kmer_names) {
						push @line,$sample->[$index];
				}

				print OUT join("\t",@line),"\n";
		}


}

sub calculate_enrichment {

		my ($seq) = @_;

		my @kmers = sort keys %$background;

		my %observed;

		foreach my $kmer(@kmers) {
				$observed{$kmer} = 0;
		}

		my %counts_per_size;

		for my $size ($mink..$maxk) {

				foreach my $start (0..(length($seq)-($size+1))) {
						my $kseq = substr($seq,$start,$size);
						next unless (exists $observed{$kseq});
						++$counts_per_size{$size};
						++$observed{$kseq};

				}
		}

		my @enrichments;
		
		foreach my $kmer (@kmers) {
				my $freq = $observed{$kmer} / $counts_per_size{length($kmer)};
				if ($freq == 0) {
						$freq = 0.5 / $counts_per_size{length($kmer)};
				}
				my $enrichment = log($freq/$background->{$kmer})/log(2);
				push @enrichments,$enrichment;
		}
		
		return \@enrichments;

}


sub check_arguments {
    # Check GC settings
		if ($gc) {
				unless ($gc =~ /^\d+$/) {
						die "GC value $gc wasn't an integer";
				}

				if ($gc < 20 or $gc > 80) {
						die "GC must be in the range 20-80%";
				}
		}
		else {
				$gc = 50;
		}

    # Check kmer range
		if ($mink) {
				unless ($mink =~ /^\d+$/) {
						die "MinK $mink wasn't an integer";
				}
				if ($mink < 1 or $mink > 3) {
						die "MinK must be in the range 1-3%";
				}
		}
		else {
				$mink = 1;
		}

		if ($maxk) {
				unless ($maxk =~ /^\d+$/) {
						die "Maxk $maxk wasn't an integer";
				}
				if ($maxk < 1 or $maxk > 3) {
						die "Maxk must be in the range 1-3%";
				}
		}
		else {
				$maxk = 3
		}
		
		if ($maxk < $mink) {
				die "MaxK value ($maxk) was lower than MinK value ($mink)\n";
		}

		# Maxseq
		if ($maxseq) {
				unless ($maxseq =~ /^\d+$/) {
						die "Maxseq $maxseq wasn't an integer";
				}
				if ($maxseq < 1) {
						die "Maxk must be 1 or more";
				}
		}
		else {
				$maxseq = 1000;
		}
		

		# Outfile
		unless ($outfile) {
				die "Output file (--outfile) wasn't specified\n";
		}


}

sub make_background {

		my %freqs;

		my @letters = qw(G A T C);

		my @kmers;

		for my $kmer ($mink..$maxk) {
#				warn "Looking at kmer length $kmer\n";
				my @kmers = @letters;
				for (0..($kmer-2)) {
						my @expanded;
						foreach my $existing (@kmers) {
								foreach my $letter (@letters) {
										push @expanded,"$existing$letter";
								}
						}
						@kmers = @expanded;
				}

				foreach my $kmer (@kmers) {
						my $freq = 1;
						my @letters = split(//,$kmer);
						foreach my $letter (@letters) {
								if ($letter eq 'C' or $letter eq 'G') {
										$freq *= ($gc/2/100);
								}
								else {
										$freq *= ((100-$gc)/2/100);
								}
						}

						$freqs{$kmer} = $freq;

#						warn "Frequency of $kmer is $freq\n";
				}

		}

		return \%freqs;

}




__DATA__
